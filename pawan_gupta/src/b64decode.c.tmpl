#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include "seccomp-bpf.h"


{{ sub_b64decode }}


// https://outflux.net/teach-seccomp/
int {{ jail_func }}()
{
	struct sock_filter filter[] = {
		/* Validate architecture. */
		VALIDATE_ARCHITECTURE,
		/* Grab the system call number. */
		EXAMINE_SYSCALL,
		/* List allowed syscalls. */
		ALLOW_SYSCALL(rt_sigreturn),
#ifdef __NR_sigreturn
		ALLOW_SYSCALL(sigreturn),
#endif
		ALLOW_SYSCALL(exit_group),
		ALLOW_SYSCALL(exit),
		ALLOW_SYSCALL(open),
		ALLOW_SYSCALL(openat),
		ALLOW_SYSCALL(close),
		ALLOW_SYSCALL(read),
		ALLOW_SYSCALL(write),
		ALLOW_SYSCALL(fstat),
		ALLOW_SYSCALL(newfstatat),
		ALLOW_SYSCALL(getrandom),
		ALLOW_SYSCALL(brk),
		ALLOW_SYSCALL(mmap),
		KILL_PROCESS,
	};
	struct sock_fprog prog = {
		.len = (unsigned short)(sizeof(filter)/sizeof(filter[0])),
		.filter = filter,
	};

	if (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0)) {
		perror("prctl(NO_NEW_PRIVS)");
		goto failed;
	}
	if (prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &prog)) {
		perror("prctl(SECCOMP)");
		goto failed;
	}
	return 0;

failed:
	if (errno == EINVAL)
		fprintf(stderr, "SECCOMP_FILTER is not available.\n");
	return 1;
}

int main()
{
    {{ jail_func }}();

    char buffer[1024];
    scanf("%1023s", buffer);
    char* data = base64_decode(buffer);
    if (data != NULL) {
        printf("%s\n", data);
        free(data);
    }
}
